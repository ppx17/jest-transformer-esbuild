var b=Object.defineProperty;var f=(n,r)=>b(n,"name",{value:r,configurable:!0});var T;import*as t from"@babel/core";import*as m from"esbuild";import{globsToMatcher as g}from"jest-util";const i=(T=process.version.match(/^v(\d+)\./))==null?void 0:T[1],l={sourcemap:"inline",loader:"ts",legalComments:"inline",platform:"node",target:i?`node${i}`:void 0},c={plugins:["jest-hoist"],sourceMaps:"inline",configFile:!1},d=f((n,r)=>{let e;if(r===void 0)e={code:n.code,map:n.map};else{if(r===null||r.code===null||r.code===void 0)throw new Error("babel transform returned empty result");e={code:r.code,map:r.map}}return{code:e.code.replace(/\/\*!(\s*istanbul ignore .*?)\*\//,"/* $1*/"),map:e.map}},"handleResult"),u=f((n,r)=>{var e;return g(((e=r==null?void 0:r.transformerConfig)==null?void 0:e.hoistMatch)||r.config.testMatch)(n)},"matcher"),p=f(()=>({process(n,r,e){var a;const s=m.transformSync(n,{...l,sourcefile:r,format:((a=e==null?void 0:e.transformerConfig)==null?void 0:a.format)||"cjs"});let o;return u(r,e)&&(o=t.transformSync(s.code,c)),d(s,o)},async processAsync(n,r,e){var a;const s=await m.transform(n,{...l,sourcefile:r,format:((a=e==null?void 0:e.transformerConfig)==null?void 0:a.format)||"esm"});let o;return u(r,e)&&(o=await t.transformAsync(s.code,c)),d(s,o)}}),"createTransformer");var w={createTransformer:p};export{w as default};
